# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

--Determine avg popularity, danceabillity, and energy
SELECT
avg(popularity)
,avg(danceability)
,avg(energy)
FROM BIT_DB.spotifydata;

--Filter tracks that are above the average popularity, danceability, and energy to determine if artist should open a concert with that song
SELECT artist_name, track_name, popularity, danceability, energy,
CASE
WHEN popularity > (SELECT avg(popularity) FROM BIT_DB.Spotifydata)
AND danceability > (SELECT avg(danceability) FROM BIT_DB.Spotifydata)
AND energy > (SELECT avg(energy) FROM BIT_DB.Spotifydata) then 'YES'
ELSE 'NO'
END AS OPEN
FROM BIT_DB.spotifydata;


--Avg popularity, danceabillity, and energy by artist and track
SELECT
artist_name
,track_name
,avg(popularity)
,avg(danceability)
,avg(energy)
FROM BIT_DB.spotifydata
GROUP BY artist_name, track_name;

--Top 10 artists are by popularity
SELECT artist_name, track_name, popularity
FROM BIT_DB.spotifydata
ORDER BY popularity desc
LIMIT 10;

--Categorize tracks by popularity status
SELECT artist_name, track_name, popularity,
CASE when popularity >= 90 then 'Radio_Hit'
when popularity < (SELECT avg(popularity) FROM BIT_DB.Spotifydata) then 'niche'
ELSE 'popular'
END AS popularity_status
FROM BIT_DB.Spotifydata
ORDER BY popularity desc;

--Find the average tempo of the track list
SELECT avg(tempo)
FROM BIT_DB.Spotifydata;

--Categorize each track by how fast the song is in relation to the average tempo
SELECT artist_name, track_name, tempo,
CASE
WHEN tempo > (SELECT avg(tempo) FROM BIT_DB.Spotifydata) then 'faster'
WHEN tempo < (SELECT avg(tempo) FROM BIT_DB.Spotifydata) then 'slower'
ELSE 'AVG'
END AS song_speed
FROM BIT_DB.Spotifydata
GROUP BY artist_name, track_name;

--Determine the most commonly used key in the track list
SELECT song_key, COUNT(*) as key_count
FROM BIT_DB.Spotifydata
GROUP BY song_key;

--Uses CTE to tag artists as a 'top star' if popularity reaches a certain threshold
WITH popularity_average_CTE AS (
    SELECT s.artist_name,
    AVG(s.popularity) AS average_popularity
    FROM Spotifydata s
    GROUP BY s.artist_name
    )
    SELECT artist_name, average_popularity, 'Top Star' AS tag
FROM popularity_average_CTE
WHERE average_popularity>=90;
