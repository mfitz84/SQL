--This SQL project answered various media sales questions. I worked with a dataset that represented a digital media store including tables for artists, albums, media tracks, invoices, employees, and customers.

--Show Customers 
SELECT CustomerId, FirstName, LastName, Country
FROM customers
WHERE Country != 'USA';

--Show only the Customers from Brazil.
SELECT *
FROM customers
WHERE Country = 'Brazil';

--Find the Invoices of customers who are from Brazil. The resulting table should show the customer's full name, Invoice ID, Date of the invoice, and billing country.
SELECT customers.FirstName, customers.LastName, invoices.InvoiceID, invoices.InvoiceDate, invoices.BillingCountry
FROM customers
LEFT JOIN invoices
ON customers.customerid = invoices.customerid
WHERE invoices.BillingCountry = 'Brazil';

--Show the Employees who are Sales Agents.
SELECT *
FROM employees
WHERE employees.Title = 'Sales Support Agent';

--Find a unique/distinct list of billing countries from the Invoice table.
SELECT DISTINCT BillingCountry
FROM invoices;

--Provide a query that shows the invoices associated with each sales agent. The resulting table should include the Sales Agent's full name.
SELECT employees.FirstName, employees.LastName, invoices.InvoiceId
FROM employees
INNER JOIN customers
ON employees.EmployeeId = customers.SupportRepId
LEFT JOIN invoices
ON customers.customerid = invoices.customerid;

--Show the Invoice Total, Customer name, Country, and Sales Agent name for all invoices and customers.
SELECT invoices.Total, customers.FirstName, customers.LastName, customers.Country, employees.FirstName, employees.LastName
FROM employees
INNER JOIN customers
ON employees.EmployeeId = customers.SupportRepId
LEFT JOIN invoices
ON customers.customerid = invoices.customerid;

--How many Invoices were there in 2009?
SELECT COUNT(invoices.InvoiceDate)
FROM invoices
WHERE invoices.InvoiceDate like '2009%';

--What are the total sales for 2009?
SELECT ROUND(SUM(invoices.Total), 2)
FROM invoices
WHERE invoices.InvoiceDate like '2009%';

--Write a query that includes the purchased track name with each invoice line ID.
SELECT t.Name, i.InvoiceLineId
FROM chinook.Invoice_items i
JOIN chinook.Tracks t 
ON i.TrackId = t.TrackId;


--Write a query that includes the purchased track name AND artist name with each invoice line ID.
SELECT artists.Name, tracks.Name , invoice_items.InvoiceLineId
FROM tracks
JOIN albums
ON tracks.AlbumId = albums.AlbumId
JOIN artists
ON artists.ArtistId = albums.ArtistId
JOIN invoice_items
ON invoice_items.TrackId = tracks.TrackId;

--Provide a query that shows all the Tracks, and include the Album name, Media type, and Genre.
SELECT tracks.Name, albums.Title, media_types.Name, genres.Name
FROM tracks
JOIN albums
ON tracks.AlbumId = albums.AlbumId
JOIN media_types
ON tracks.MediaTypeId = media_types.MediaTypeId
JOIN genres
ON tracks.GenreId = genres.GenreId;

--Show the total sales made by each sales agent.
SELECT employees.FirstName, employees.LastName, ROUND(SUM(invoices.Total), 2) AS 'Total Sales'
FROM employees
INNER JOIN customers
ON employees.EmployeeId = customers.SupportRepId
LEFT JOIN invoices
ON customers.customerid = invoices.customerid
GROUP BY employees.EmployeeId;

--Which sales agent made the most dollars in sales in 2009?
SELECT employees.FirstName, employees.LastName, ROUND(SUM(invoices.Total), 2) AS 'Total Sales'
FROM employees
INNER JOIN customers
ON employees.EmployeeId = customers.SupportRepId
LEFT JOIN invoices
ON customers.customerid = invoices.customerid
GROUP BY employees.EmployeeId
ORDER BY ROUND(SUM(invoices.Total), 2) Limit 1;
